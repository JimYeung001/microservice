server:
  port: 8080
spring:
  application:
    name: "accounts"
  profiles:
    active: "prod"
  datasource:
    url: jdbc:h2:mem:testdb
    driverClassName: org.h2.Driver
    username: sa
    password: ''
  jpa:
    show-sql: true
  sql:
    init:
      mode: always
  config:
    import: "optional:configserver:http://localhost:8071"
  cloud:
    openfeign:
      circuitbreaker:
        enabled: true
    stream:
      bindings:
        sendCommunication-out-0:
          destination: send-communication
  rabbitmq:
    host: localhost
    port: 5672
    username: guest
    password: guest
    connection-timeout: 10s

management:
  endpoints:
    web:
      exposure:
        include: "*"
  health:
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true
  endpoint:
    shutdown: 
      enabled: true
    health:
      probes:
        enabled: true
  info:
    env:
      enabled: true
    refresh:
      enabled: true
  metrics:
    logs:
      application: ${spring.application.name}      
 
endpoints:
  shutdown:
    enabled: true

eureka:
  instance:
    preferIpAddress: true
  client:
    fetchRegistry: true
    registerWithEurka: true
    serviceUrl:
      defaultZone: http://localhost:8070/eureka/

info:
  app:
    name: "accounts"
    description: "Eazy Accounts Application"
    version: "1.0.0"

logging:
  level:
    com:
      eazy:
        accounts: DEBUG
  pattern:
    level: "%5p[${spring.application.name},%X{trace_id},%X{span_id}]"

resilience4j-circuitbreaker:
  config:
    slidingWindowSize: 10
    permittedNumberOfCallsInHalfOpenState: 2
    failureRateThreashold: 50
    waitDurationInOpenState: 10000

resilience4j.retry:
  configs:
    default:
      maxRetryAttempts: 3
      waitDuration: 500
      enableExponentialBackoff: true
      exponentialBackoffMultiplier: 2
      ignoreExceptions:
        - java.lang.NullPointerException
      retryException:
        - java.util.concurrent.TimeoutException

resilience4j.ratelimiter:
  configs:
    default:
      timeoutDuration: 1000
      limitRefreshPeriod: 5000
      limitForPeriod: 1

